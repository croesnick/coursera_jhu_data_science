drv <- dbDriver("PostgreSQL")
library(RPostgreSQL)
drv <- dbDriver("PostgreSQL")
conn <- dbConnect(drv, dbname="statedb_development",host="localhost", user="statedb")
items <- dbGetQuery(conn, "select * from item_updates")
query <- "select p.name as partner_name, idt.source_id, i.update_sequence_value as sequence_number, i.version, i.set_at, i.normalizer_state as status, i.comment->>'message' as error, i.comment->>'detail' as error_details from items i left join id_translation_tables idt on i.id_translation_table_id = idt.id left join partners p on idt.partner_id = p.id where i.set_at >= '2016-11-01'::timestamp and i.normalizer_state in ('done','failure');"
items <- dbGetQuery(conn, query)
# order(items, partner_name, source_id, -update_sequence_value, -version, -set_at)
library(dplyr)
items <- arrange(items, partner_name, source_id, desc(sequence_number), desc(version), desc(set_at))
# distinct(items, partner_name, source_id, update_sequence_value, status,error,.keep_all=T)
items.uniq <- distinct(items, partner_name, source_id, sequence_number, status, error, .keep_all = TRUE)
nrow(items.uniq)
nrow(items)
library(ggplot2)
qplot(set_at, data = items.uniq, fill = status)
qplot(set_at, data = items.uniq, fill = status, col = "black")
items <- arrange(items, partner_name, source_id, sequence_number, version, set_at)
items.uniq <- distinct(items, partner_name, source_id, sequence_number, status, error, .keep_all = TRUE)
qplot(set_at, data = items.uniq, fill = status, col = "black")
qplot(set_at, data = items.uniq, fill = status)
items.uniq.2017 <- filter(items.uniq, set_at >= as.POSIXct("2017-01-01"))
qplot(set_at, data = filter(items.uniq.2017, status = "failure"), fill = error)
qplot(set_at, data = filter(items.uniq.2017, status == "failure"), fill = error)
qplot(set_at, data = items.uniq.2017, fill = status)
ggplot(items.uniq.2017, aes(x = set_at, fill = status)) + geom_area(position = 'stack')
ggplot(items.uniq.2017, aes(x = set_at, y = n(), fill = status)) + geom_area(position = 'stack')
ggplot(items.uniq.2017, aes(fill = status) + geom_area(position = 'stack')
)
?ggplot
table(filter(items.uniq, error == "Download step error"))
table(filter(items.uniq, error == "Download step error")$detail)
table(filter(items.uniq, error == "Download step error")$details)
x <- filter(items.uniq, error == "Download step error")
x$error_details
table(x$error_details)
table(filter(items.uniq, error == "Failed to build slice")$error_details)
grep("^No intermediate found for clip", items$error_details)
items[grep("^No intermediate found for clip", items$error_details)]
items[grep("^No intermediate found for clip", items$error_details),]
items[grep("^No intermediate found for clip", items$error_details),]
?mutate
items[grep("^No intermediate found for clip", items$error_details),"error_details"]
items[grep("^No intermediate found for clip", items$error_details),"error_details"] <- "No intermediate found for clip"
grep("^No intermediate found for clip", items$error_details)
drv <- dbDriver("PostgreSQL")<c
table(filter(items, error == "Failed to build slice")$error_details)
table(filter(items, error == "Slice validation error")$error_details)
table(filter(items.uniq.2017, error == "Slice validation error")$error_details)
table(filter(items.uniq.2017, error == "Failed to build slice")$error_details)
items <- mutate(items, error_class = NA)
filter(items, error_details == "No image urls found")
items[filter(items, error_details == "No image urls found"),]
items[filter(items, error_details == "No image urls found")]
items[items$error_details == "No image urls found",]
items[items$error_details == "No image urls found","error_class"] <- "Metadata w/o image reference(s)"
items[items$error_details == "No image urls found",]$error_class <- "Metadata w/o image reference(s)"
items$error_details == "No image urls found"
items[items$error_details == "No image urls found","error_class"]
items[items$error_details == "No image urls found" & !is.na(items$error_details),]$error_class <- "Metadata w/o image reference(s)"
table(items$error_class)
table(filter(items, error == "Download step error")$error_details)
table(filter(items, error == "Failed to build slice")$error_details)
table(filter(items, error == "Failed to build slice")$error_details)
items[items$error_details == "No intermediate found" & !is.na(items$error_details),]$error_class <- "No transcoding intermediate file found"
nrow(items)
[items$error_details == "No intermediate found" & !is.na(items$error_details)
items$error_details == "No intermediate found" & !is.na(items$error_details)
any(items$error_details == "No intermediate found" & !is.na(items$error_details))
items[items$error_details == "No intermediate found for clip" & !is.na(items$error_details),]$error_class <- "No transcoding intermediate file found"
table(filter(items, error == "Failed to build slice")$error_details)
table(items$error_class)
table(filter(items, error == "Remote file not found")$error_details)
items[items$error == "Remote file not found" & !is.na(items$error),]$error_class <- "Remote file not found"
table(items$error_class)
items[grep("^Retries exhausted", items$error),"error_class"] <- "Retries exhausted, discarding asset update"
items[grep("^Failed to pass data to MIA", items$error),"error_class"] <- "Failed to pass data to MIA"
table(items$error_class)
g <- qplot(set_at, data = items.uniq.2017, fill = status)
g + facet_grid(. ~ partner_name)
g + facet_grid(partner_name ~ .)
g <- qplot(set_at, data = items.uniq.2017, fill = status, colour="black")
g + facet_grid(partner_name ~ .)
g <- qplot(set_at, data = filter(items.uniq.2017, partner_name != "p7s1", fill = status)
g + facet_grid(partner_name ~ .)
g <- qplot(set_at, data = filter(items.uniq.2017, partner_name != "p7s1"), fill = status)
g + facet_grid(partner_name ~ .)
g + facet_grid(partner_name ~ .) + scale_y_log10()
g <- qplot(set_at, data = items.uniq.2017, fill = status)
g + facet_grid(partner_name ~ .) + scale_y_log10()
g <- qplot(set_at, data = filter(items.uniq.2017, partner_name != "p7s1"), fill = status)
g + facet_grid(partner_name ~ .)
g <- qplot(set_at, data = filter(items.uniq.2017, status = "done"), fill = status)
g <- qplot(set_at, data = filter(items.uniq.2017, status == "done"), fill = status)
g + facet_grid(partner_name ~ .) + scale_y_log10()
g <- qplot(set_at, data = filter(items.uniq.2017, status == "failure"), fill = status)
g + facet_grid(partner_name ~ .) + scale_y_log10()
g <- qplot(set_at, data = filter(items.uniq.2017, status == "done"), fill = status)
g + facet_grid(partner_name ~ .) + geom_bar(stat="identity", colour="blue")  + scale_y_log10()
g <- qplot(set_at, data = filter(items.uniq.2017, status == "done"), fill = status)
g + geom_bar(stat="identity", colour="blue") + facet_grid(partner_name ~ .) + scale_y_log10()
g <- qplot(set_at, data = filter(items.uniq.2017, status == "done"), fill = status)
g + geom_bar(colour="blue") + facet_grid(partner_name ~ .) + scale_y_log10()
table(filter(items, error == "Slice validation error")$error_details)
items[grep(":415"),"error"]
items[grep(":415", items$error_details),"error"]
items[grep(":415", items$error_details),"error_class"] <- "Transcoding error: broken video file"
table(filter(items, error == "Slice validation error")$error_details)
table(items$error_class)
items[grep(":415", items$error_details),"error_details"] <- NA
table(items$error_class)
table(filter(items, error == "Slice validation error")$error_details)
items[grep("'#/0/images'", items$error_details)]
items[grep("'#/0/images'", items$error_details),]
items[grep("'#/0/images'", items$error_details),"error_details"]
table(items$error_class)
items[grep("'#/0/images'", items$error_details),"error_class"] <- "Metadata w/o image reference(s)"
items[grep("'#/0/images'", items$error_details),"error_details"] <- NA
table(items$error_class)
items[grep("'#/0/images'", items$error_details),"error_details"]
table(filter(items, error == "Slice validation error")$error_details)
items[grep("Metadata validation errors", items$error_details),"error_details"]
items[grep("Metadata validation errors", items$error_details),"error_class"] <- "Metadata schema validation errors"
items[grep("Metadata validation errors", items$error_details),"error_details"] <- NA
table(filter(items, error == "Slice validation error")$error_details)
table(items$error_class)
items[grep("seek test at 90 percent of video failed", items$error_details),"error_class"] <- "Transcoding error: broken video file"
items[grep("seek test at 90 percent of video failed", items$error_details),"error_details"] <- NA
table(filter(items, error == "Slice validation error")$error_details)
table(items$error_class)
qplot(set_at, data = filter(items.uniq.2017, status == "failure"), fill = error)
items[is.na(items$error_class) & !is.na(items$error)]
items[is.na(items$error_class) & !is.na(items$error),]
items[is.na(items$error_class) & !is.na(items$error),"error"]
table(items[is.na(items$error_class) & !is.na(items$error),"error"])
table(items$error_class)
items[items$error == "Discarding stale video update", "error_class"] <- "Discarding stale video update"
items[grep("^Discarding stale video update$", items$error), "error_class"] <- "Discarding stale video update"
items[grep("^Discarding stale video update$", items$error), "error"] <- NA
table(items$error_class)
table(items[is.na(items$error_class) & !is.na(items$error),"error"])
items[grep("^Failed to pass data to the MIA$", items$error), "error_class"] <- "Failed to pass data to the MIA"
items[grep("^Failed to pass data to the MIA$", items$error), "error"] <- NA
table(items[is.na(items$error_class) & !is.na(items$error),"error"])
items[grep("^Discarding stale CAPI v2 content$", items$error), "error"] <- NA
table(items[is.na(items$error_class) & !is.na(items$error),"error"])
table(items$error_class)
items[items$error == "Transcoding error","error_details"]
items[items$error == "Transcoding error","error_class"] <- "Transcoding error: broken video file"
items[grep("^Transcoding error$", items$error),"error_class"] <- "Transcoding error: broken video file"
items[grep("^Transcoding error$", items$error),"error"] <- NA
table(items[items$error == "Download step error","error_details"])
items[grep("^MetaUtils::HTTPConnector::NotFoundError", items$error_details),"error_class"] <- "Remote file not found"
items[grep("^MetaUtils::HTTPConnector::NotFoundError", items$error_details),"error"] <- NA
items[grep("^Download step error$", items$error),"error_class"] <- "Remote file not found"
table(items[items$error == "Slice validation error","error_details"])
items[grep("#<Curl::Err::TimeoutError: Timeout was reached>", items$error_details),"error_class"] <- "Remote file not found"
items[grep("#<Curl::Err::TimeoutError: Timeout was reached>", items$error_details),"error"] <- NA
items[grep("Slice validation error", items$error),"error"] <- NA
table(items[is.na(items$error_class) & !is.na(items$error),"error"])
items[grep("Data does not contain any reference to a video source", items$error_details),"error_class"] <- "Data does not contain any reference to a video source"
items[grep("Data does not contain any reference to a video source", items$error_details),"error"] <- NA
table(items$error_class)
items <- arrange(items, partner_name, source_id, sequence_number, version, set_at)
items.uniq <- distinct(items, partner_name, source_id, sequence_number, status, error, .keep_all = TRUE)
items.uniq.2017 <- filter(items.uniq, set_at >= as.POSIXct("2017-01-01"))
qplot(set_at, data = filter(items.uniq.2017, status == "failure"), fill = error_class)
table(filter(items, error_class == NA, error != na))
table(filter(items, error_class == NA, error != NA))
table(filter(items, error_class == NA, status == "failure"))
items[items$status == "failure",]
items.uniq <- distinct(items, partner_name, source_id, sequence_number, status, error_class, .keep_all = TRUE)
items.uniq.2017 <- filter(items.uniq, set_at >= as.POSIXct("2017-01-01"))
qplot(set_at, data = filter(items.uniq.2017, status == "failure"), fill = error_class)
table[items$status == "failure" & is.na(error_class), "error", "error_details"]
table[items$status == "failure" & is.na(error_class), c("error", "error_details")]
table[items$status == "failure" & is.na(items$error_class), c("error", "error_details")]
items.failure <- items[items$status == "failure"]
items.failure <- items[items$status == "failure",]
items.failure[is.na(items.failure$error_class), ]
items.failure[is.na(items.failure$error_class), "error"]
items.failure[is.na(items.failure$error_class), "error_details"]
table(items.failure[is.na(items.failure$error_class), "error_details"])
table(items$error_class)
items[grep("^Filtered out stale CapiV2 data with", items$error_details), "error_class"] <- "Filtered out stale CapiV2 data"
items[grep("^Filtered out stale CapiV2 data with", items$error_details), "error_details"] <- NA
table(items$error_class)
items.failure[is.na(items.failure$error_class), "error_details"]
nrow(items.failure[is.na(items.failure$error_class), "error_details"])
length(items.failure[is.na(items.failure$error_class), "error_details"])
items.raw <- arrange(items, partner_name, source_id, sequence_number, version, set_at)
items.failure[is.na(items.failure$error_class), "error"]
length(items.failure[is.na(items.failure$error_class), "error_details"])
items.raw <- dbGetQuery(conn, query)
filter(items.raw, status == "failure" & is.na(error))
nrow(filter(items.raw, status == "failure" & is.na(error)))
items.uniq <- distinct(items, partner_name, source_id, sequence_number, status, error_class, .keep_all = TRUE)
items.uniq.2017 <- filter(items.uniq, set_at >= as.POSIXct("2017-01-01"))
qplot(set_at, data = filter(items.uniq.2017, status == "failure"), fill = error_class)
q <- qplot(set_at, data = filter(items.uniq.2017, status == "failure"), fill = error_class)
q + + scale_y_log10()
q + scale_y_log10()
q
q + xlab("Update Date") + ylab("Count") + main("P7S1 Errors/Class")
q + xlab("Update Date") + ylab("Count")
q + xlab("Update Date") + ylab("Count") + scale_x_date(breaks = "days")
q + xlab("Update Date") + ylab("Count") + scale_x_date(date_breaks = "days")
as.Date(items$set_at[1])
items.uniq.2017["update_date"] <- as.Date(items.uniq.2017$set_at)
q <- qplot(update_date, data = filter(items.uniq.2017, status == "failure"), fill = error_class)
q
q + guides(fill=guide_legend(title="Error Classes"))
q + guides(fill=guide_legend(title="Error Classes")) + ggtitle("P7S1 Errors/Class")
q + guides(fill=guide_legend(title="Error Classes")) + ggtitle("P7S1 Video Update Errors")
q + xlab("Update Date") + ylab("Count") + ggtitle("P7S1 Video Update Errors") + guides(fill=guide_legend(title="Error Classes"))
q + xlab("Update Date") + ylab("Count") + ggtitle("P7S1 Video Update Errors") + guides(fill=guide_legend(title="Error Classes")) + geom_bar(stat="identity",position="dodge")
qplot(update_date, data = filter(items.uniq.2017, status == "failure"), fill = error_class, geom = "bar")
qplot(factor(update_date), data = filter(items.uniq.2017, status == "failure"), fill = error_class, geom = "bar")
qplot(factor(update_date), data = filter(items.uniq.2017, status == "failure"), fill = error_class) + geom_bar()
qlot(factor(update_date), data = filter(items.uniq.2017, status == "failure"), fill = error_class) + geom_bar(stat="identity",position="dodge")
qplot(factor(update_date), data = filter(items.uniq.2017, status == "failure"), fill = error_class) + geom_bar(stat="identity",position="dodge")
qplot(factor(update_date), data = filter(items.uniq.2017, status == "failure"), fill = error_class) + geom_bar(position="dodge")
qqplot(filter(items.uniq.2017, status == "failure"), aes(factor(update_date)))
qqplot(filter(items.uniq.2017, status == "failure"), aes(factor(update_date)))
qqplot(filter(items.uniq.2017, status == "failure"), aes(factor(update_date)))
qplot(set_at, data = filter(items.uniq.2017, status == "failure") + facet_grid(error_class ~ .)
qplot(set_at, data = filter(items.uniq.2017, status == "failure")) + facet_grid(error_class ~ .)
qplot(set_at, data = filter(items.uniq.2017, status == "failure")) + facet_grid(error_class ~ .)
qplot(set_at, data = filter(items.uniq.2017, status == "failure")) + facet_wrap(~ error_class)
qplot(update_date, data = filter(items.uniq.2017, status == "failure")) + facet_wrap(~ error_class)
qplot(update_date, data = filter(items.uniq.2017, status == "failure")) + facet_wrap(~ error_class)
qplot(update_date, data = filter(items.uniq.2017, status == "failure")) + facet_wrap(~ error_class) + xlab("Update Date") + ylab("Count") + ggtitle("P7S1 Video Update Errors")
qplot(update_date, data = filter(items.uniq.2017, status == "failure")) + geom_bar(fill = "blue") + facet_wrap(~ error_class) + xlab("Update Date") + ylab("Count") + ggtitle("P7S1 Video Update Errors")
qplot(update_date, data = filter(items.uniq.2017, status == "failure")) + geom_bar(fill = "red") + facet_wrap(~ error_class) + xlab("Update Date") + ylab("Count") + ggtitle("P7S1 Video Update Errors")
qplot(updated_at, data = filter(items.uniq.2017, status == "done")) geom_bar(fill = "blue") + facet_wrap(~ partner_name) + scale_y_log10()
qplot(updated_at, data = filter(items.uniq.2017, status == "done")) + geom_bar(fill = "blue") + facet_wrap(~ partner_name) + scale_y_log10()
qplot(update_date, data = filter(items.uniq.2017, status == "done")) + geom_bar(fill = "blue") + facet_wrap(~ partner_name) + scale_y_log10()
qplot(update_date, data = filter(items.uniq.2017, status == "done"), fill = status) + geom_bar(fill = "blue") + facet_wrap(~ partner_name) + scale_y_log10()
qplot(update_date, data = filter(items.uniq.2017, status == "done")) + geom_bar(fill = "white", colour = "black") + facet_wrap(~ partner_name) + scale_y_log10()
qplot(update_date, data = filter(items.uniq.2017, status == "done")) + geom_bar(fill = "white", colour = "gray") + facet_wrap(~ partner_name) + scale_y_log10()
qplot(update_date, data = filter(items.uniq.2017, status == "done")) + geom_bar(fill = "white", colour = "darkgray") + facet_wrap(~ partner_name) + scale_y_log10()
qplot(update_date, data = filter(items.uniq.2017, status == "done")) + geom_bar(fill = "white", colour = "#BBBBBB") + facet_wrap(~ partner_name) + scale_y_log10()
qplot(update_date, data = filter(items.uniq.2017, status == "done")) + geom_bar(fill = "white", colour = "#444444") + facet_wrap(~ partner_name) + scale_y_log10()
qplot(update_date, data = filter(items.uniq.2017, status == "done")) + geom_bar(fill = "white", colour = "#666666") + facet_wrap(~ partner_name) + scale_y_log10()
qplot(update_date, data = filter(items.uniq.2017, status == "done")) + geom_bar(fill = "white", colour = "#666666") + facet_wrap(~ partner_name) + scale_y_log10() + xlab("Update Date") + ylab("Count (log scale)") + ggtitle("Successful Video Updates per Partner")
qplot(update_date, data = filter(items.uniq.2017, status == "failure")) + geom_bar(fill = "white", colour = "#ff3232") + facet_wrap(~ partner_name) + scale_y_log10() + xlab("Update Date") + ylab("Count (log scale)") + ggtitle("Failed Video Updates per Partner")
qplot(update_date, data = filter(items.uniq.2017, status == "failure")) + geom_bar(fill = "ff3232", colour = "#666666") + facet_wrap(~ partner_name) + scale_y_log10() + xlab("Update Date") + ylab("Count (log scale)") + ggtitle("Failed Video Updates per Partner")
qplot(update_date, data = filter(items.uniq.2017, status == "failure")) + geom_bar(fill = "#ff3232", colour = "#666666") + facet_wrap(~ partner_name) + scale_y_log10() + xlab("Update Date") + ylab("Count (log scale)") + ggtitle("Failed Video Updates per Partner")
qplot(update_date, data = filter(items.uniq.2017, status == "failure", partner_name == "p7s1")) + geom_bar(fill = "red") + facet_wrap(~ error_class) + xlab("Update Date") + ylab("Count") + ggtitle("P7S1 Video Update Errors")
qplot(update_date, data = filter(items.uniq.2017, partner_name == "p7s1"), fill = status) + facet_wrap(~ error_class) + xlab("Update Date") + ylab("Count") + ggtitle("P7S1 Video Update Errors")
qplot(update_date, data = filter(items.uniq.2017, partner_name == "p7s1"), fill = status) + xlab("Update Date") + ylab("Count") + ggtitle("P7S1 Video Update Errors")
qplot(update_date, data = filter(items.uniq.2017, partner_name == "p7s1"), fill = status) + xlab("Update Date") + ylab("Count") + ggtitle("P7S1 Video Updates: Successful vs. Failed")
qplot(update_date, data = filter(items.uniq.2017, partner_name == "p7s1"), fill = status) + scale_fill_manual(values=c("#999999", "#E69F00")) + xlab("Update Date") + ylab("Count") + ggtitle("P7S1 Video Updates: Successful vs. Failed")
qplot(update_date, data = filter(items.uniq.2017, partner_name == "p7s1"), fill = status) + scale_fill_manual(values=c("blue", "red")) + xlab("Update Date") + ylab("Count") + ggtitle("P7S1 Video Updates: Successful vs. Failed")
qplot(update_date, data = filter(items.uniq.2017, partner_name == "p7s1"), fill = status) + scale_fill_manual(values=c("lightblue", "red")) + xlab("Update Date") + ylab("Count") + ggtitle("P7S1 Video Updates: Successful vs. Failed")
qplot(update_date, data = filter(items.uniq.2017, partner_name == "p7s1"), fill = status) + scale_fill_manual(values=c("#9999FF", "red")) + xlab("Update Date") + ylab("Count") + ggtitle("P7S1 Video Updates: Successful vs. Failed")
qplot(update_date, data = filter(items.uniq.2017, partner_name == "p7s1"), fill = status) + scale_fill_manual(values=c("#9999FF", "red")) + xlab("Update Date") + ylab("Count") + ggtitle("P7S1 Video Updates: Successful vs. Failed") + guides(fill=guide_legend(title="Import Status"))
qplot(update_date, data = filter(items.uniq.2017, status == "failure")) + geom_bar(fill = "red") + facet_wrap(~ partner_name) + scale_y_log10() + xlab("Update Date") + ylab("Count (log scale)") + ggtitle("Failed Video Updates per Partner")
qplot(update_date, data = filter(items.uniq.2017, status == "done")) + geom_bar(fill = "#9999FF") + facet_wrap(~ partner_name) + scale_y_log10() + xlab("Update Date") + ylab("Count (log scale)") + ggtitle("Successful Video Updates per Partner")
qplot(update_date, data = filter(items.uniq.2017, status == "failure")) + geom_bar(fill = "red") + facet_wrap(~ partner_name) + scale_y_log10() + xlab("Update Date") + ylab("Count (log scale)") + ggtitle("Failed Video Updates per Partner")
qplot(update_date, data = filter(items.uniq.2017, status == "failure")) + geom_bar(fill = "red") + facet_wrap(~ partner_name) + xlab("Update Date") + ylab("Count (log scale)") + ggtitle("Failed Video Updates per Partner")
qplot(update_date, data = filter(items.uniq.2017, status == "failure")) + geom_bar(fill = "red") + facet_wrap(~ partner_name) + xlab("Update Date") + ylab("Count") + ggtitle("Failed Video Updates per Partner")
qplot(update_date, data = filter(items.uniq.2017, status == "done")) + geom_bar(fill = "#9999FF") + facet_wrap(~ partner_name) + scale_y_log10() + xlab("Update Date") + ylab("Count (log scale)") + ggtitle("Successful Video Updates per Partner")
qplot(update_date, data = filter(items.uniq.2017, status == "done")) + geom_bar(fill = "#9999FF") + facet_wrap(~ partner_name) + xlab("Update Date") + ylab("Count (log scale)") + ggtitle("Successful Video Updates per Partner")
qplot(update_date, data = filter(items.uniq.2017, status == "done")) + geom_bar(fill = "#9999FF") + facet_wrap(~ partner_name) + xlab("Update Date") + ylab("Count") + ggtitle("Successful Video Updates per Partner")
qplot(update_date, data = filter(items.uniq.2017, status == "failure")) + geom_bar(fill = "red") + facet_wrap(~ partner_name, scales='free') + xlab("Update Date") + ylab("Count") + ggtitle("Failed Video Updates per Partner")
qplot(update_date, data = filter(items.uniq.2017, status == "failure")) + geom_bar(fill = "red") + facet_wrap(~ partner_name, scales = "fixed") + xlab("Update Date") + ylab("Count") + ggtitle("Failed Video Updates per Partner")
qplot(update_date, data = filter(items.uniq.2017, status == "failure")) + geom_bar(fill = "red") + facet_wrap(~ partner_name, scales = "free_x") + xlab("Update Date") + ylab("Count") + ggtitle("Failed Video Updates per Partner")
qplot(update_date, data = filter(items.uniq.2017, status == "failure")) + geom_bar(fill = "red") + facet_wrap(~ partner_name, scales = "free_x", drop = F) + xlab("Update Date") + ylab("Count") + ggtitle("Failed Video Updates per Partner")
qplot(update_date, data = filter(items.uniq.2017, status == "done")) + geom_bar(fill = "#9999FF") + facet_wrap(~ partner_name) + xlab("Update Date") + ylab("Count") + ggtitle("Successful Video Updates per Partner")
qplot(update_date, data = filter(items.uniq.2017, status == "done", partner_name != "p7s1")) + geom_bar(fill = "#9999FF") + facet_wrap(~ partner_name) + xlab("Update Date") + ylab("Count") + ggtitle("Successful Video Updates per Partner")
qplot(update_date, data = filter(items.uniq.2017, status == "done", partner_name != "p7s1")) + geom_bar(fill = "#9999FF") + facet_wrap(~ partner_name, scale = "free_y") + xlab("Update Date") + ylab("Count") + ggtitle("Successful Video Updates per Partner")
qplot(update_date, data = filter(items.uniq.2017, status == "done", partner_name != "p7s1")) + geom_bar(fill = "#9999FF") + facet_wrap(~ partner_name) + xlab("Update Date") + ylab("Count") + ggtitle("Successful Video Updates per Partner")
qplot(update_date, data = filter(items.uniq.2017, status == "done", partner_name != "p7s1")) + geom_bar(fill = "#9999FF") + facet_wrap(~ partner_name, ncol = 4) + xlab("Update Date") + ylab("Count") + ggtitle("Successful Video Updates per Partner")
qplot(update_date, data = filter(items.uniq.2017, status == "done", partner_name != "p7s1")) + geom_bar(fill = "#9999FF") + facet_wrap(~ partner_name, nrow = 2) + xlab("Update Date") + ylab("Count") + ggtitle("Successful Video Updates per Partner")
qplot(update_date, data = filter(items.uniq.2017, status == "done", partner_name != "p7s1")) + geom_bar(fill = "#9999FF") + facet_wrap(~ partner_name, nrow = 2, scales = "free_y") + xlab("Update Date") + ylab("Count") + ggtitle("Successful Video Updates per Partner")
qplot(update_date, data = filter(items.uniq.2017, partner_name == "p7s1"), fill = status) + scale_fill_manual(values=c("#9999FF", "red")) + xlab("Update Date") + ylab("Count") + ggtitle("P7S1 Video Updates: Successful vs. Failed") + guides(fill=guide_legend(title="Import Status"))
qplot(update_date, data = filter(items.uniq.2017, status == "failure", partner_name == "p7s1")) + geom_bar(fill = "red") + facet_wrap(~ error_class) + xlab("Update Date") + ylab("Count") + ggtitle("P7S1 Video Update Errors")
qplot(update_date, data = filter(items.uniq.2017, status == "failure", partner_name == "p7s1")) + geom_bar(fill = "red") + facet_wrap(~ error_class, nrow = 2) + xlab("Update Date") + ylab("Count") + ggtitle("P7S1 Video Update Errors")
items.uniq.2017[grep("^Filtered out stale CapiV2", items.uniq.2017$error_class), "error_class"] <- "Legal reasons: skipped assets with id < 2089576"
qplot(update_date, data = filter(items.uniq.2017, status == "done", partner_name != "p7s1")) + geom_bar(fill = "#9999FF") + facet_wrap(~ partner_name, nrow = 2, scales = "free_y") + xlab("Update Date") + ylab("Count") + ggtitle("Successful Video Updates per Partner")
qplot(update_date, data = filter(items.uniq.2017, status == "failure", partner_name == "p7s1")) + geom_bar(fill = "red") + facet_wrap(~ error_class, nrow = 2) + xlab("Update Date") + ylab("Count") + ggtitle("P7S1 Video Update Errors")
qplot(update_date, data = filter(items.uniq.2017, status == "failure")) + geom_bar(fill = "red") + facet_wrap(~ partner_name, scales = "free_x", nrow = 2) + xlab("Update Date") + ylab("Count") + ggtitle("Failed Video Updates per Partner")
qplot(update_date, data = filter(items.uniq.2017, status == "failure")) + geom_bar(fill = "red") + facet_wrap(~ partner_name, scales = "free_x", nrow = 2, drop = F) + xlab("Update Date") + ylab("Count") + ggtitle("Failed Video Updates per Partner")
qplot(update_date, data = filter(items.uniq.2017, status == "failure")) + geom_bar(fill = "red") + facet_wrap(~ partner_name, scales = "free_x", nrow = 1, drop = F) + xlab("Update Date") + ylab("Count") + ggtitle("Failed Video Updates per Partner")
qplot(update_date, data = filter(items.uniq.2017, status == "failure")) + geom_bar(fill = "red") + facet_wrap(~ partner_name, nrow = 1, drop = F) + xlab("Update Date") + ylab("Count") + ggtitle("Failed Video Updates per Partner")
qplot(update_date, data = filter(items.uniq.2017, status == "failure")) + geom_bar(fill = "red") + facet_wrap(~ partner_name, nrow = 1, drop = F) + scale_x_log10() + xlab("Update Date") + ylab("Count") + ggtitle("Failed Video Updates per Partner")
qplot(update_date, data = filter(items.uniq.2017, status == "failure")) + geom_bar(fill = "red") + facet_wrap(~ partner_name, nrow = 1, drop = F) + scale_y_log10() + xlab("Update Date") + ylab("Count") + ggtitle("Failed Video Updates per Partner")
qplot(update_date, data = filter(items.uniq.2017, status == "failure")) + geom_bar(fill = "red") + facet_wrap(~ partner_name, nrow = 1, drop = F) + xlab("Update Date") + ylab("Count") + ggtitle("Failed Video Updates per Partner")
items.uniq.2017[grep("^No transcoding intermediate file found", items.uniq.2017$error_class), "error_class"] <- "Data w/o valid reference to video binary"
qplot(update_date, data = filter(items.uniq.2017, status == "failure", partner_name == "p7s1")) + geom_bar(fill = "red") + facet_wrap(~ error_class, nrow = 2) + xlab("Update Date") + ylab("Count") + ggtitle("P7S1 Video Update Errors")
item.uniq.2017[grep("Remote file not found", items.uniq.2017$error_class),"error"]
items.uniq.2017[grep("Remote file not found", items.uniq.2017$error_class),"error"]
items.uniq.2017[grep("Remote file not found", items.uniq.2017$error_class),"error_details"]
qplot(update_date, data = filter(items.uniq.2017, status == "done", partner_name != "p7s1")) + geom_bar(fill = "#9999FF") + facet_wrap(~ partner_name, nrow = 2, scales = "free_y") + xlab("Update Date") + ylab("Count") + ggtitle("Successful Video Updates per Partner")
qplot(update_date, data = filter(items.uniq.2017, status == "done", partner_name != "p7s1", partner_name != "puls4-video")) + geom_bar(fill = "#9999FF") + facet_wrap(~ partner_name, nrow = 2, scales = "free_y") + xlab("Update Date") + ylab("Count") + ggtitle("Successful Video Updates per Partner")
qplot(update_date, data = filter(items.uniq.2017, status == "failure", partner_name != "puls4-video")) + geom_bar(fill = "red") + facet_wrap(~ partner_name, nrow = 1, drop = F) + xlab("Update Date") + ylab("Count") + ggtitle("Failed Video Updates per Partner")
plot <- qplot(data.steps_by_date,
main = "Total number of steps taken each day",
xlab = 'Total steps',
ylab = 'Frequency')
?`data.frame
?data.frame
?data.frame
?data.frame
?table
?data.frame
data.frame(foo = c(1,2,3), bar = c(4,5,6)
)
data.imputed <- data
data.imputed$steps <- impute(data$steps, fun = median)
data.imputed$steps <- impute(data$steps, fun = median)
data.imputed <- data
data.imputed$steps <- impute(data$steps, fun = median)
5!
?binomial
factorial(5)/(factorial(4)) * q5.p^4 + q5.p^5
q5.p <- .5
factorial(5)/(factorial(4)) * q5.p^4 + q5.p^5
factorial(5)/(factorial(4)) * q5.p^4 # + q5.p^5
factorial(5)/(factorial(4)) * q5.p^5 + q5.p^5
factorial(5)/(factorial(4)) * (1-q5.p)^1 * q5.p^4 + q5.p^5
q4.sample_size <- 100
q4.sd <- q3.sd^2/q4.sample_size
q3.sd <- 75
q3.mean <- 1100
q3.quantile <- .95
qnorm(q3.quantile, q3.mean, q3.sd)
q4.sample_size <- 100
q4.sd <- q3.sd^2/q4.sample_size
q4.mean <- q3.mean
q4.quantile <- .95
q4.sd
q3.sd
q4.quantile <- .95
qnorm(q4.quantile, q4.mean, q4.sd)
q4.quantile <- .90
qnorm(q4.quantile, q4.mean, q4.sd)
q7.sigma <- 1/12
q7.mu <- .5
q8.lambda <- 5
q8.t <- 3
?poisson
?qnorm
?poisson
?qpois
q8.x <- 10
ppois(q8.x, q8.lambda * q8.t, lower.tail = T)
?pdf
(1/12)^2/1000
ppois(q8.x, q8.lambda * q8.t, lower.tail = T)
qnorm(q4.quantile, q4.mean, q4.sd)
q4.sd <- q3.sd^2/q4.sample_size
q4.sd
q4.sample_size <- 1000
q4.sd <- q3.sd^2/q4.sample_size
q4.mean <- q3.mean
q4.quantile <- .95
qnorm(q4.quantile, q4.mean, q4.sd)
pnorm(-1, 0, 1, lower.tail = T)
ppois(q8.x, q8.lambda * q8.t, lower.tail = T)
q4.sample_size <- 1000
q4.sd <- q3.sd/sqrt(q4.sample_size)
q4.mean <- q3.mean
q4.quantile <- .95
qnorm(q4.quantile, q4.mean, q4.sd)
q4.sample_size <- 100
q4.sd <- q3.sd/sqrt(q4.sample_size)
q4.mean <- q3.mean
q4.quantile <- .95
qnorm(q4.quantile, q4.mean, q4.sd)
pnorm(16, mean = 15, sd = 1) - pnorm(14, mean = 15, sd = 1)
require(mtcars)
dataset(mtcars)
library(datasets)
data(mtcars)
fit = lm(mpg ~ factor(cyl) * wt)
fit = lm(mpg ~ factor(cyl) * wt, data = mtcars)
summary(fit)
fit = lm(mpg ~ wt * factor(cyl), data = mtcars)
summary(fit)
setwd("~/code/r/coursera_jhu_data_science/data_products/week_4/projects")
shiny::runApp('~/CourseProjectWeek4')
setwd("~/code/r/coursera_jhu_data_science/data_products/week_4/projects")
